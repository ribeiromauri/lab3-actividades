/*1) Realizar un trigger que al agregar un viaje:
- Verifique que la tarjeta se encuentre activa.
- Verifique que el saldo de la tarjeta sea suficiente para realizar el viaje.
- Registre el viaje
- Registre el movimiento
- Descuente el stock de la tarjeta
*/

--------------------------------
-- Tabla        : Viajes
-- Tipo Trigger : Instead Of
-- Acción       : Insert 
--------------------------------
CREATE TRIGGER tr_Agregar_Viaje ON VIAJES
INSTEAD OF INSERT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
			DECLARE @ID_TARJETA INT
			DECLARE @ESTADO_TARJETA BIT
			DECLARE @SALDO_TARJETA MONEY
			DECLARE @COSTO_VIAJE MONEY
			DECLARE @INTERNO_VIAJE INT
			DECLARE @LINEA_VIAJE INT

			SELECT @ID_TARJETA = IDTARJETA, @COSTO_VIAJE = I.COSTO, @INTERNO_VIAJE = I.INTERNO, @LINEA_VIAJE = I.IDLINEA FROM inserted I

			SELECT @ESTADO_TARJETA = T.ESTADO, @SALDO_TARJETA = T.SALDO FROM TARJETAS T WHERE T.IDTARJETA = @ID_TARJETA
			IF @ESTADO_TARJETA = 1
				BEGIN
					IF @SALDO_TARJETA >= @COSTO_VIAJE
						BEGIN
							INSERT INTO VIAJES (IDTARJETA, FECHA, COSTO, INTERNO, IDLINEA, ESTADO)
							VALUES (@ID_TARJETA, GETDATE(), @COSTO_VIAJE, @INTERNO_VIAJE, @LINEA_VIAJE, 1)

							DECLARE @TIPO_MOVIMIENTO INT

							SELECT @TIPO_MOVIMIENTO = TP.ID FROM MOVIMIENTOS M 
							INNER JOIN TIPO_MOVIMIENTO TP ON M.TIPO = TP.ID
							WHERE M.IDTARJETA = @ID_TARJETA

							INSERT INTO MOVIMIENTOS (IDTARJETA, TIPO, FECHA_HORA, IMPORTE, ESTADO)
							VALUES (@ID_TARJETA, @TIPO_MOVIMIENTO, GETDATE(), @COSTO_VIAJE, 1)

							UPDATE TARJETAS SET SALDO = SALDO - @COSTO_VIAJE WHERE IDTARJETA = @ID_TARJETA
						END
			END
			ELSE 
				BEGIN
					RAISERROR('Estado de tarjeta 0', 16, 1)
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		RAISERROR('Error al cargar viaje', 16, 1)
	END CATCH
END
GO
--2) Realizar un trigger que al registrar un nuevo usuario:
-- Registre el usuario
-- Registre una tarjeta a dicho usuario
--------------------------------
-- Tabla        : Usuarios
-- Tipo Trigger : Instead Of
-- Acción       : Insert 
--------------------------------
CREATE TRIGGER tr_Agregar_Usuario ON USUARIOS
INSTEAD OF INSERT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
			DECLARE @EXISTE_USUARIO BIT 
			DECLARE @DNI_USUARIO INT
			DECLARE @APELLIDOS_USUARIO VARCHAR(255)
			DECLARE @NOMBRE_USUARIO VARCHAR(255)
			DECLARE @FNAC_USUARIO DATE
			DECLARE @DOMICILIO_USUARIO VARCHAR(255)

			SELECT @DNI_USUARIO = I.DNI, @APELLIDOS_USUARIO = I.APELLIDOS, @NOMBRE_USUARIO = I.NOMBRES, @FNAC_USUARIO = I.FNAC, @DOMICILIO_USUARIO = I.DOMICILIO FROM INSERTED I

			SELECT @EXISTE_USUARIO = COUNT(*) FROM USUARIOS U WHERE @DNI_USUARIO = U.DNI
			IF @EXISTE_USUARIO = 0
				BEGIN
					INSERT INTO USUARIOS (APELLIDOS, NOMBRES, FNAC, DOMICILIO, DNI, ESTADO)
					VALUES (@APELLIDOS_USUARIO, @NOMBRE_USUARIO, @FNAC_USUARIO, @DOMICILIO_USUARIO, @DNI_USUARIO, 1)

					DECLARE @IDUSUARIO INT
					SELECT @IDUSUARIO = U.IDUSUARIO FROM USUARIOS U WHERE U.DNI = @DNI_USUARIO --OBTENER EL ULTIMO NUM DE USUARIO

					INSERT INTO TARJETAS (IDUSUARIO, FECHA_ALTA, SALDO, ESTADO) -- SUPONIENDO QUE NUMERO TARJETA ES INCREMENTAL O RANDOM 
					VALUES (@IDUSUARIO, GETDATE(), 0, 1)
				END
			ELSE
				BEGIN
					RAISERROR('Existe registro de usuario con el mismo DNI', 16, 1)
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		RAISERROR('Error al registrar usuario', 16, 1)
	END CATCH
END
GO

/*3) Realizar un trigger que al registrar una nueva tarjeta:
- Le realice baja lógica a la última tarjeta del cliente.
- Le asigne a la nueva tarjeta el saldo de la última tarjeta del cliente.
- Registre la nueva tarjeta para el cliente (con el saldo de la vieja tarjeta, la fecha de alta de la tarjeta deberá ser la del sistema).
*/

CREATE TRIGGER tr_Registrar_Tarjeta ON TARJETAS
INSTEAD OF INSERT 
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
			DECLARE @ID_TARJETA INT
			DECLARE @SALDO_TARJETA MONEY
			DECLARE @ID_USUARIO INT

			SELECT @ID_TARJETA = i.IDTARJETA, @SALDO_TARJETA = i.SALDO, @ID_USUARIO = i.IDUSUARIO FROM inserted i 

			UPDATE TARJETAS SET ESTADO = 0 WHERE IDTARJETA = @ID_TARJETA

			INSERT INTO TARJETAS (IDTARJETA, IDUSUARIO, FECHA_ALTA, SALDO, ESTADO) --NROTARJETA IDENTITY ?
			VALUES(@ID_TARJETA, @ID_USUARIO, GETDATE(), @SALDO_TARJETA, 1)
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		RAISERROR('Error al registrar tarjeta', 16, 1)
	END CATCH
END
GO
/*
4) Realizar un trigger que al eliminar un cliente:
- Elimine el cliente
- Elimine todas las tarjetas del cliente
- Elimine todos los movimientos de sus tarjetas
- Elimine todos los viajes de sus tarjetas
*/
CREATE TRIGGER tr_Eliminar_Usuario ON USUARIOS
INSTEAD OF DELETE
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
			DECLARE @ID_USUARIO INT
			DECLARE @ID_TARJETA INT
			SELECT @ID_USUARIO = d.IDUSUARIO FROM deleted d
			SELECT @ID_TARJETA = T.IDTARJETA FROM TARJETAS T WHERE T.IDUSUARIO = @ID_USUARIO
			
			DELETE FROM VIAJES WHERE IDTARJETA IN (
				SELECT M.IDMOVIMIENTO FROM MOVIMIENTOS M
				INNER JOIN TARJETAS T ON M.IDTARJETA = T.IDTARJETA
				WHERE T.IDUSUARIO = @ID_USUARIO
			)

			DELETE FROM MOVIMIENTOS WHERE IDTARJETA IN(
				SELECT M.IDMOVIMIENTO FROM MOVIMIENTOS M
				INNER JOIN TARJETAS T ON M.IDTARJETA = T.IDTARJETA
				WHERE T.IDUSUARIO = @ID_USUARIO
			)

			DELETE FROM TARJETAS WHERE IDUSUARIO = @ID_USUARIO

			DELETE FROM USUARIOS WHERE IDUSUARIO = @ID_USUARIO
			
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		RAISERROR('Error al dar de baja usuario', 16, 1)
	END CATCH
END